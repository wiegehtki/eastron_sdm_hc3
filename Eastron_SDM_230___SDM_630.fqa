{"name":"Eastron SDM 230 / SDM 630","type":"com.fibaro.genericDevice","apiVersion":"1.3","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_4148"},"sections":{"items":[]}},"head":{"title":"quickApp_device_4148"}}},"uiView":[],"useUiView":true,"uiCallbacks":[],"quickAppVariables":[{"name":"SDM_ACTIVE","type":"string","value":"false"},{"name":"MODBUS_IP","type":"string","value":"192.168.100.237"},{"name":"MODBUS_PORT","type":"string","value":"502"},{"name":"UNIT_IDS","type":"string","value":"1,2,3,4"},{"name":"INTERVALL","type":"string","value":"20"},{"name":"ICON_PARENT","type":"string","value":"1144"},{"name":"ICON_CHILDS","type":"string","value":"1156,1157,1158,1159"},{"name":"DEVICE_TYPE","type":"string","value":"SDM230"}],"typeTemplateInitialized":true},"initialInterfaces":[],"files":[{"name":"main","isMain":true,"isOpen":true,"content":"local ChildDevicesDetails = {\n    {name = \"L V\",                   register = 0x0000, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"V\"},\n    {name = \"L A\",                   register = 0x0006, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"A\"},\n    {name = \"L W\",                   register = 0x000C, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"L VA\",                  register = 0x0012, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VA\"},\n    {name = \"L VAr\",                 register = 0x0018, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VAr\"},\n    {name = \"L cosϕ\",                register = 0x001E, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"cosϕ\"},\n    {name = \"L Angle\",               register = 0x0024, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"°\"},\n    {name = \"Frequency\",             register = 0x0046, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"Hz\"},\n    {name = \"Import kWh\",            register = 0x0048, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"Export kWh\",            register = 0x004A, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"production\",  unit=\"kWh\"},\n    {name = \"Import kVArh\",          register = 0x004C, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"Export kVArh\",          register = 0x004E, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"production\",  unit=\"kVArh\"},\n    {name = \"Total W Demand\",        register = 0x0054, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"Max Total W Demand\",    register = 0x0056, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"W Import Demand\",       register = 0x0058, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.powerMeter\",  rateType=\"consumption\", unit=\"W\"},\n    {name = \"Max W Import Demand\",   register = 0x005A, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.powerMeter\",  rateType=\"consumption\", unit=\"W\"},\n    {name = \"W Export Demand\",       register = 0x005C, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.powerMeter\",  rateType=\"consumption\", unit=\"W\"},\n    {name = \"Max W Export Demand\",   register = 0x005E, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.powerMeter\",  rateType=\"consumption\", unit=\"W\"},\n    {name = \"L A Demand\",            register = 0x0102, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L Max A Demand\",        register = 0x0108, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"Total kWh\",             register = 0x0156, device_type = \"SDM230\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"Total kVArh\",           register = 0x0158, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"W Total seit Reset\",    register = 0x0180, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.powerMeter\",  rateType=\"consumption\", unit=\"W\"},  \n    {name = \"kWh Total seit Reset\",  register = 0x0182, device_type = \"SDM230\", enabled = false, type = \"com.fibaro.energyMeter\", rateType=\"consumption\", unit=\"kWh\"}, \n    {name = \"L1 V\",                  register = 0x0000, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"V\"},\n    {name = \"L2 V\",                  register = 0x0002, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"V\"},\n    {name = \"L3 V\",                  register = 0x0004, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"V\"},\n    {name = \"L1 A\",                  register = 0x0006, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"A\"},\n    {name = \"L2 A\",                  register = 0x0008, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"A\"},\n    {name = \"L3 A\",                  register = 0x000A, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"A\"},\n    {name = \"L1 W\",                  register = 0x000C, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"L2 W\",                  register = 0x000E, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"L3 W\",                  register = 0x0010, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"L1 VA\",                 register = 0x0012, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VA\"},\n    {name = \"L2 VA\",                 register = 0x0014, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VA\"},\n    {name = \"L3 VA\",                 register = 0x0016, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VA\"},\n    {name = \"L1 VAr\",                register = 0x0018, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VAr\"},\n    {name = \"L2 VAr\",                register = 0x001A, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VAr\"},\n    {name = \"L3 VAr\",                register = 0x001C, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VAr\"},\n    {name = \"L1 cosϕ\",               register = 0x001E, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"cosϕ\"},\n    {name = \"L2 cosϕ\",               register = 0x0020, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"cosϕ\"},\n    {name = \"L3 cosϕ\",               register = 0x0022, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"cosϕ\"},\n    {name = \"L1 Angle\",              register = 0x0024, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"°\"},\n    {name = \"L2 Angle\",              register = 0x0026, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"°\"},\n    {name = \"L3 Angle\",              register = 0x0028, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"°\"},\n    {name = \"L-N V\",                 register = 0x002A, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"⌀ V\"},\n    {name = \"L-N A\",                 register = 0x002E, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"⌀ A\"},\n    {name = \"Total Line A\",          register = 0x0030, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"Σ A\"},\n    {name = \"Total W\",               register = 0x0034, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"Σ W\"},\n    {name = \"Total VA\",              register = 0x0038, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"Σ VA\"},\n    {name = \"Total VAr\",             register = 0x003C, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"Σ VAr\"},\n    {name = \"Total cosϕ\",            register = 0x003E, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"Σ cosϕ\"},\n    {name = \"Total Angle\",           register = 0x0042, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"°\"},\n    {name = \"Frequency\",             register = 0x0046, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"Hz\"},\n    {name = \"Import kWh\",            register = 0x0048, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"Export kWh\",            register = 0x004A, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"production\",  unit=\"kWh\"},\n    {name = \"Import kVArh\",          register = 0x004C, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"Export kVArh\",          register = 0x004E, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"production\",  unit=\"kVArh\"},\n    {name = \"Total kVAh\",            register = 0x0050, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVAh\"},\n    {name = \"Total A\",               register = 0x0052, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.meter\",        rateType=\"consumption\", unit=\"A\"},\n    {name = \"Total Import Demand W\", register = 0x0054, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"Max Import Demand W\",   register = 0x0056, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.powerMeter\",   rateType=\"consumption\", unit=\"W\"},\n    {name = \"Total Demand VA\",       register = 0x0064, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VA\"},\n    {name = \"Max System Power VA\",   register = 0x0066, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"VA\"},\n    {name = \"Neutral Demand A\",      register = 0x0068, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"Max Neutral Demand\",    register = 0x006A, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L1-L2 V\",               register = 0x00C8, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"V\"},\n    {name = \"L2-L3 V\",               register = 0x00CA, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"V\"},\n    {name = \"L3-L1 V\",               register = 0x00CC, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"V\"},\n    {name = \"L-L V\",                 register = 0x00CE, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"V\"},\n    {name = \"N A\",                   register = 0x00E0, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L1-N V THD\",            register = 0x00EA, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L2-N V THD\",            register = 0x00EC, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L3-N V THD\",            register = 0x00EE, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L1 A THD\",              register = 0x00F0, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L2 A THD\",              register = 0x00F2, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L3 A THD\",              register = 0x00F4, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L-N V THD\",             register = 0x00F8, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"A THD\",                 register = 0x00FA, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"Total Inv cosϕ\",        register = 0x00FE, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"cosϕ\"},\n    {name = \"L1 Demand A\",           register = 0x0102, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L2 Demand A\",           register = 0x0104, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L3 Demand A\",           register = 0x0106, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L1 Max Demand\",         register = 0x0108, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L2 Max Demand\",         register = 0x010A, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L3 Max Demand\",         register = 0x010C, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"A\"},\n    {name = \"L1-L2 V THD\",           register = 0x014E, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L2-L3 V THD\",           register = 0x0150, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L3-L1 V THD\",           register = 0x0152, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"L-L V THD\",             register = 0x0154, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"%\"},\n    {name = \"Total kWh\",             register = 0x0156, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"Total kVArh\",           register = 0x0158, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"L1 Import kWh\",         register = 0x015A, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"L2 Import kWh\",         register = 0x015C, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"L3 Import kWh\",         register = 0x015E, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"L1 Export kWh\",         register = 0x0160, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"production\",  unit=\"kWh\"},\n    {name = \"L2 Export kWh\",         register = 0x0162, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"production\",  unit=\"kWh\"},\n    {name = \"L3 Export kWh\",         register = 0x0164, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"production\",  unit=\"kWh\"},\n    {name = \"L1 Total kWh\",          register = 0x0166, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"L2 Total kWh\",          register = 0x0168, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"L3 Total kWh\",          register = 0x016A, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\",  rateType=\"consumption\", unit=\"kWh\"},\n    {name = \"L1 Import kVArh\",       register = 0x016C, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"L2 Import kVArh\",       register = 0x016E, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"L3 Import kVArh\",       register = 0x0170, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"L1 Export kVArh\",       register = 0x0172, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"production\",  unit=\"kVArh\"},\n    {name = \"L2 Export kVArh\",       register = 0x0174, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"production\",  unit=\"kVArh\"},\n    {name = \"L3 Export kVArh\",       register = 0x0176, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"production\",  unit=\"kVArh\"},\n    {name = \"L1 Total kVArh\",        register = 0x0178, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"L2 Total kVArh\",        register = 0x017A, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n    {name = \"L3 Total kVArh\",        register = 0x017C, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"},\n\t{name = \"Net kWh\",               register = 0x018C, device_type = \"SDM630\", enabled = true, type = \"com.fibaro.energyMeter\", rateType=\"consumption\", unit=\"kWh\"}, --SDM 630 V3 only\n    {name = \"Net kVArh\",             register = 0x018E, device_type = \"SDM630\", enabled = false, type = \"com.fibaro.meter\",       rateType=\"consumption\", unit=\"kVArh\"} --SDM 630 V3 only\n}\n\n-- Gemeinsame Basisklasse für gemeinsame Initialisierungslogik\nclass 'BaseMeter' (QuickAppChild)\n\nfunction BaseMeter:__init(device)\n    QuickAppChild.__init__(self, device)\n    self:debug(self.class.name .. \" init\")\nend\n\n-- Unterklassen, die von BaseMeter erben\nclass 'PowerMeter' (BaseMeter)\nclass 'EnergyMeter' (BaseMeter)\nclass 'Meter' (BaseMeter)\n\n-- Quick App für Fibaro HC3 zur Abfrage eines Eastron SDM 630 Stromzählers via Modbus TCP\nlocal DEVICE_TYPE        = \"SDM630\"\nlocal UNIT_IDS           = {0, 1, 2} -- Liste der UNIT_IDs\n\nlocal MODBUS_IP          = \"0.0.0.0\"\nlocal MODBUS_PORT        = 0\n\nlocal ICON_PARENT        = 1144 -- Die ID des Icons\nlocal ICON_CHILDS        = {\n    [0] = 1148, -- Icon-ID für UNIT_ID 0\n    [1] = 1150, -- Icon-ID für UNIT_ID 1\n    [2] = 1152  -- Icon-ID für UNIT_ID 2\n}\n\nlocal INTERVALL          = 0\nlocal SDM_ACTIVE         = \"false\" -- if false then inactive\n\nfunction PowerMeter:__init(device)\n    QuickAppChild.__init(self, device)\n    self:debug(\"PowerMeter init\")\nend\n\nfunction EnergyMeter:__init(device)\n    QuickAppChild.__init(self, device)\n    self:debug(\"EnergyMeter init\")\nend\n\nfunction Meter:__init(device)\n    QuickAppChild.__init(self, device)\n    self:debug(\"Meter init\")\nend\n\n-- Funktion zum Lesen von Variablen des Devices\nfunction QuickApp:readDeviceVariables()\n    -- Funktion zum Setzen einer Variable, falls sie nicht existiert\n    local function ensureVariableExists(name, defaultValue)\n        local value = self:getVariable(name)\n        if value == nil or value == '' then\n            self:setVariable(name, tostring(defaultValue))\n            value = tostring(defaultValue)\n        end\n        return value\n    end\n\n    -- Setze und lese Variablen mit Standardwerten\n    MODBUS_IP       = ensureVariableExists(\"MODBUS_IP\", \"192.168.xxx.xxx\")\n    MODBUS_PORT     = ensureVariableExists(\"MODBUS_PORT\", \"502\")\n    UNIT_IDS        = ensureVariableExists(\"UNIT_IDS\", \"1,2,3\") -- Beispielwerte für UNIT_IDs\n    INTERVALL       = ensureVariableExists(\"INTERVALL\", \"10\")\n    ICON_PARENT     = ensureVariableExists(\"ICON_PARENT\", \"1144\")\n    ICON_CHILDS     = ensureVariableExists(\"ICON_CHILDS\", \"xxxx,xxxx,xxxx\") -- Beispielwerte für ICON_CHILDS\n    DEVICE_TYPE     = ensureVariableExists(\"DEVICE_TYPE\", \"SDMx30\")\n    SDM_ACTIVE      = ensureVariableExists(\"SDM_ACTIVE\", \"false\") == \"true\"\n\n    -- Konvertierung in entsprechende Typen\n    MODBUS_PORT  = tonumber(MODBUS_PORT)\n    UNIT_IDS     = self:parseUnitIds(UNIT_IDS)\n    ICON_CHILDS  = self:parseIconIds(ICON_CHILDS)\n    INTERVALL    = tonumber(INTERVALL)\n    ICON_PARENT  = tonumber(ICON_PARENT)\n\n    -- Debug-Ausgaben\n    self:debug(\"MODBUS_IP: \" .. MODBUS_IP)\n    self:debug(\"MODBUS_PORT: \" .. tostring(MODBUS_PORT))\n    self:debug(\"UNIT_IDS: \" .. table.concat(UNIT_IDS, \",\"))\n    self:debug(\"ICON_PARENT: \" .. tostring(ICON_PARENT))\n    self:debug(\"ICON_CHILDS: \" .. table.concat(ICON_CHILDS, \",\"))\n    self:debug(\"DEVICE_TYPE: \" .. tostring(DEVICE_TYPE))\n    self:debug(\"INTERVALL: \" .. tostring(INTERVALL))\n    self:debug(\"SDM_ACTIVE: \" .. tostring(SDM_ACTIVE))\nend\n\nfunction QuickApp:parseUnitIds(unitIdsString)\n    local unitIds = {}\n    for id in string.gmatch(unitIdsString, '([^,]+)') do\n        table.insert(unitIds, tonumber(id))\n    end\n    return unitIds\nend\n\nfunction QuickApp:parseIconIds(iconIdsString)\n    local iconIds = {}\n    local i = 0\n    for id in string.gmatch(iconIdsString, '([^,]+)') do\n        iconIds[i] = tonumber(id)\n        i = i + 1\n    end\n    return iconIds\nend\n\nfunction QuickApp:onInit()\n    self:initChildDevices({\n        [\"com.fibaro.powerMeter\"] = PowerMeter,\n        [\"com.fibaro.energyMeter\"] = EnergyMeter,\n        [\"com.fibaro.meter\"] = Meter,\n    })\n\n    self:readDeviceVariables()\n    self:debug(\"QuickApp:onInit\")\n    if tostring(SDM_ACTIVE) == \"true\" then\n       self:updateProperty(\"deviceIcon\", ICON_PARENT)\n       for _, unitId in ipairs(UNIT_IDS) do\n           self.unitID = unitId\n           self:checkAndCreateChildDevices(unitId)\n       end\n       self:debug(\"Quick App gestartet\")\n       self.ip = MODBUS_IP\n       self.port = tonumber(MODBUS_PORT)\n       self.readings = ChildDevicesDetails -- Initialisierung der readings\n       self:connect()\n    else\n       self:debug(\"SDM_ACTIVE == false, Abfrage ist inaktiv\")\n    end\nend\n\n-- Funktion zum Lesen von Parametern\nfunction QuickApp:readParameters(index, unitId, callback)\n    if index > #self.readings then\n        callback()\n        return\n    end\n\n    local reading = self.readings[index]\n    self:readRegister(unitId, reading.register, function(value)\n        local uniqueName = reading.name .. \" UID \" .. unitId\n        if reading.device_type == DEVICE_TYPE then\n            if reading.enabled then\n                value = tonumber(string.format(\"%.2f\", value)) -- Werte auf zwei Nachkommastellen runden\n                self:debug(\"ID: \" .. uniqueName .. \" Wert: \" .. tostring(value))\n                local ChildID = self:getChildDeviceIDByName(reading.name, unitId)\n                if ChildID then\n                    fibaro.call(tonumber(ChildID), \"setProperty\", \"value\", value)\n                end\n                self:updateValue(uniqueName, value) -- Aufruf von updateValue\n            end\n        end\n        self:readParameters(index + 1, unitId, callback)\n    end)\nend\n\n\n\nfunction QuickApp:startReading()\n    self:debug(\"Starting to read parameters...\")\n    if not self.readings or #self.readings == 0 then\n        self:debug(\"Keine zu lesenden Parameter definiert.\")\n        return\n    end\n    self:readAllUnitIds(1)\nend\n\nfunction QuickApp:readAllUnitIds(unitIdIndex)\n    if unitIdIndex > #UNIT_IDS then\n        self:debug(\"Alle UNIT_IDs wurden abgefragt.\")\n        self:scheduleNextReading()\n        return\n    end\n\n    local unitId = UNIT_IDS[unitIdIndex]\n    self:readParameters(1, unitId, function()\n        self:debug(\"Warte 5 Sekunden, bevor die nächste UNIT_ID gelesen wird...\")\n        fibaro.setTimeout(5000, function()\n            self:readAllUnitIds(unitIdIndex + 1)\n        end)\n    end)\nend\n\nfunction QuickApp:scheduleNextReading()\n    self:debug(\"Warte \" .. INTERVALL .. \" Sekunden, bevor der nächste Zyklus startet...\")\n    fibaro.setTimeout(INTERVALL * 1000, function()\n        self:startReading()\n    end)\nend\n\nfunction QuickApp:checkAndCreateChildDevices(unitId)\n    local existingChildDevices = self.childDevices\n    local existingDeviceNames = {}\n\n    -- Speichern der Namen der vorhandenen Geräte\n    for _, device in pairs(existingChildDevices) do\n        existingDeviceNames[device.name] = true\n    end\n\n    for _, expected in ipairs(ChildDevicesDetails) do\n        if expected.device_type == DEVICE_TYPE then\n            local uniqueName = expected.name .. \" UID \" .. unitId\n            if not existingDeviceNames[uniqueName] then\n                if (tostring(expected.enabled) == \"true\") then\n                    local newDevice = {}\n                    for k, v in pairs(expected) do\n                        newDevice[k] = v\n                    end\n                    newDevice.name = uniqueName\n                    local childDevice = self:createChildDevice(newDevice, _G[expected.type])\n                    if childDevice then\n                        self:updateProperty(\"deviceIcon\", ICON_PARENT)\n                        fibaro.call(childDevice.id, \"setProperty\", \"deviceIcon\", ICON_CHILDS[unitId-1])\n                        fibaro.sleep(150)\n                        fibaro.call(childDevice.id, \"setProperty\", \"rateType\", \"production\")\n                        fibaro.call(childDevice.id, \"setProperty\", \"rateType\", expected.rateType)\n                        fibaro.sleep(150)\n                        fibaro.call(childDevice.id, \"setProperty\", \"manufacturer\", \"Eastron\")\n                        fibaro.call(childDevice.id, \"setProperty\", \"model\", DEVICE_TYPE)\n                        fibaro.sleep(150)\n                        fibaro.call(childDevice.id, \"setProperty\", \"userDescription\", \"Eastron \" .. DEVICE_TYPE .. \"\\nChild-Device: \" .. uniqueName)\n                        fibaro.call(childDevice.id, \"setProperty\", \"unit\", expected.unit)\n\n                        fibaro.sleep(300)\n\n                        self:debug(\"Child-Device mit ID \" .. childDevice.id .. \" und Name '\" .. uniqueName .. \"' wurde erstellt und Icon mit ID \" .. ICON_CHILDS[unitId-1] .. \" wurde zugewiesen.\")\n                    else\n                        self:debug(\"Fehler beim Erstellen des Child-Devices: \" .. uniqueName)\n                    end\n                end\n            else\n                if (tostring(expected.enabled) == \"false\") then\n                    local ChildDeviceID = self:getChildDeviceIDByName(expected.name, unitId)\n                    local success = self:removeChildDevice(ChildDeviceID)\n                    if success then\n                        self:debug(\"Child-Device \" .. ChildDeviceID .. \" erfolgreich gelöscht.\")\n                    else\n                        self:debug(\"Fehler beim Löschen des Child-Devices \" .. ChildDeviceID .. \".\")\n                    end\n                end\n            end\n        else\n            --self:debug(\"DeviceType \" .. expected.device_type .. \" \" .. DEVICE_TYPE)\n        end\n    end\nend\n\n-- Funktion zur Suche nach einem Child Device nach Name und UNIT_ID\nfunction QuickApp:getChildDeviceIDByName(name, unitId)\n    local uniqueName = name .. \" UID \" .. unitId\n    for _, device in pairs(self.childDevices) do\n        if device.name == uniqueName then\n            return device.id\n        end\n    end\n    return nil -- Rückgabe von nil, falls das Gerät nicht gefunden wird\nend\n\nfunction QuickApp:connect()\n    self.sock = net.TCPSocket({ timeout = 20000 }) -- Timeout auf 20 Sekunden erhöhen\n    self.sock:connect(self.ip, self.port, {\n        success = function()\n            self:debug(\"Verbunden mit \" .. self.ip .. \":\" .. self.port)\n            self:startReading()\n        end,\n        error = function(err)\n            self:debug(\"Verbindungsfehler: \" .. err)\n            -- Versuche die Verbindung nach einem kurzen Timeout erneut\n            fibaro.setTimeout(5000, function() self:connect() end)\n        end\n    })\nend\n\nfunction QuickApp:readRegister(unitId, register, callback)\n    local request = self:buildModbusRequest(unitId, register)\n\n    self.sock:write(request, {\n        success = function()\n            self.sock:read({\n                success = function(response)\n                    if response then\n                        -- Verarbeite die Antwort nur, wenn sie vorhanden ist\n                        self:processResponse(response, function(value)\n                            if value then\n                                self:updateValue(\"value_name\", value) -- Beispielname, anpassen je nach Bedarf\n                            end\n                            callback(value)\n                        end)\n                    else\n                        self:debug(\"Leere Antwort erhalten.\")\n                        callback(nil)\n                    end\n                end,\n                error = function(err)\n                    self:debug(\"Lesefehler: \" .. err)\n                    callback(nil)\n                end\n            })\n        end,\n        error = function(err)\n            self:debug(\"Sendefehler: \" .. err)\n            callback(nil)\n        end\n    })\nend\n\n\nfunction QuickApp:buildModbusRequest(unitId, register)\n    local transactionID = string.char(0x00, 0x02)\n    local protocolID = string.char(0x00, 0x00)\n    local length = string.char(0x00, 0x06)\n    local unitID = string.char(unitId)\n    local functionCode = string.char(0x04)\n    local startingAddress = string.char(math.floor(register / 256), register % 256)\n    local quantityOfRegisters = string.char(0x00, 0x02)\n\n    return transactionID .. protocolID .. length .. unitID .. functionCode .. startingAddress .. quantityOfRegisters\nend\n\n-- Funktion zum Verarbeiten der Modbus-Antwort\nfunction QuickApp:processResponse(response, callback)\n    if #response >= 13 then\n        local b1, b2, b3, b4 = string.byte(response, 10, 13)\n        local value = self:bytesToFloat(b1, b2, b3, b4)\n        value = tonumber(string.format(\"%.2f\", value)) -- Werte auf zwei Nachkommastellen runden\n        callback(value)\n    else\n        self:debug(\"Unzureichende Antwortlänge: \" .. #response)\n        callback(nil)\n    end\nend\n\nfunction QuickApp:bytesToFloat(b1, b2, b3, b4)\n    local sign = b1 > 0x7F and -1 or 1\n    local exponent = (b1 % 0x80) * 2 + math.floor(b2 / 0x80)\n    local mantissa = ((b2 % 0x80) * 0x100 + b3) * 0x100 + b4\n    if exponent == 0 and mantissa == 0 then\n        return 0\n    end\n    return sign * 2^(exponent - 127) * (1 + mantissa / 0x800000)\nend\n\n-- Funktion zum Aktualisieren des Werts\nfunction QuickApp:updateValue(name, value)\n    _G[name] = value  -- Setze den globalen Wert\n    self:updateView(name, \"value\", value and string.format(\"%.2f\", value) or \"Error\")\nend\n\nfunction QuickApp:toHex(str)\n    return (str:gsub('.', function(c)\n        return string.format('%02X', string.byte(c))\n    end))\nend\n\n"}]}